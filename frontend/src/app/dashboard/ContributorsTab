import { useState, useEffect } from 'react';
import { UserGroupIcon, UserCircleIcon } from '@heroicons/react/24/outline';

export default function ContributorsTab({ projectID, username, project }) {
  const [contributors, setContributors] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [inviteEmail, setInviteEmail] = useState('');
  
  useEffect(() => {
    fetchContributors();
  }, [projectID]);
  
  const fetchContributors = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`http://localhost:5000/api/project_contributors?projectID=${projectID}`);
      const data = await response.json();
      
      if (data.success) {
        setContributors(data.contributors || []);
      } else {
        setError('Failed to load contributors');
      }
    } catch (err) {
      setError('Something went wrong. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleInvite = async (e) => {
    e.preventDefault();
    
    if (!inviteEmail) return;
    
    try {
      const response = await fetch('http://localhost:5000/api/invite_contributor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          projectID,
          email: inviteEmail,
          invitedBy: username
        }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        setInviteEmail('');
        alert('Invitation sent successfully!');
      } else {
        alert(data.message || 'Failed to send invitation');
      }
    } catch (err) {
      console.error(err);
      alert('Something went wrong');
    }
  };

  const isOwner = project.creator === username;
  
  if (isLoading) {
    return <div className="flex justify-center py-8"><div className="animate-spin h-8 w-8 border-4 border-green-500 rounded-full border-t-transparent"></div></div>;
  }
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-bold text-green-900">Project Contributors</h2>
        <div className="text-green-800">
          <span className="font-medium">{contributors.length}</span> citizen scientists contributing
        </div>
      </div>
      
      {error && (
        <div className="mb-4 p-3 bg-red-50 text-red-700 rounded-md text-sm">
          {error}
        </div>
      )}
      
      {isOwner && (
        <div className="mb-6 bg-green-50 p-4 rounded-lg border border-green-200">
          <h3 className="text-lg font-medium text-green-900 mb-3">Invite Contributors</h3>
          <form onSubmit={handleInvite} className="flex items-end gap-2">
            <div className="flex-1">
              <label htmlFor="inviteEmail" className="block text-sm font-medium text-green-800 mb-1">
                Email Address
              </label>
              <input
                type="email"
                id="inviteEmail"
                value={inviteEmail}
                onChange={(e) => setInviteEmail(e.target.value)}
                className="w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                placeholder="example@email.com"
              />
            </div>
            <button
              type="submit"
              className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Send Invite
            </button>
          </form>
        </div>
      )}
      
      <div className="grid gap-4 md:grid-cols-2">
        {/* Project Owner Card */}
        <div className="bg-green-50 rounded-lg p-4 border border-green-200">
          <div className="flex items-center">
            <div className="bg-green-600 text-white p-3 rounded-full">
              <UserCircleIcon className="h-6 w-6" />
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-green-900">{project.creator}</p>
              <p className="text-xs text-green-700">Project Owner</p>
            </div>
          </div>
        </div>
        
        {/* Contributors Cards */}
        {contributors.map((contributor, index) => (
          <div key={index} className="bg-white rounded-lg p-4 border border-green-100 shadow-sm">
            <div className="flex items-center">
              <div className="bg-green-100 text-green-800 p-3 rounded-full">
                <UserGroupIcon className="h-6 w-6" />
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-green-900">{contributor.username}</p>
                <p className="text-xs text-green-700">
                  {contributor.dataPoints} data point{contributor.dataPoints !== 1 ? 's' : ''} contributed
                </p>
              </div>
              <div className="ml-auto">
                <span className="text-xs font-medium px-2 py-1 rounded-full bg-green-100 text-green-800">
                  {contributor.joinDate ? `Joined ${contributor.joinDate}` : 'Active'}
                </span>
              </div>
            </div>
            {contributor.recentActivity && (
              <div className="mt-3 text-xs text-green-700">
                <span className="font-medium">Recent activity:</span> {contributor.recentActivity}
              </div>
            )}
          </div>
        ))}
      </div>
      
      {contributors.length === 0 && (
        <div className="text-center py-8">
          <UserGroupIcon className="h-12 w-12 text-green-300 mx-auto mb-3" />
          <h3 className="text-lg font-medium text-green-900 mb-1">No Contributors Yet</h3>
          <p className="text-green-700">
            {isOwner 
              ? "Invite citizen scientists to help collect data for your project!"
              : "Be the first to contribute to this research project!"}
          </p>
        </div>
      )}
    </div>
  );
}