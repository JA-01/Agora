import { useState, useEffect } from 'react';
import { MapPinIcon, PlusCircleIcon } from '@heroicons/react/24/outline';

export default function LocationsTab({ projectID, username, project }) {
  const [locations, setLocations] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [isAddingLocation, setIsAddingLocation] = useState(false);
  const [newLocation, setNewLocation] = useState({
    name: '',
    address: '',
    coordinates: '',
    description: '',
    accessibility: 'public'
  });
  
  useEffect(() => {
    fetchLocations();
  }, [projectID]);
  
  const fetchLocations = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`http://localhost:5000/api/project_locations?projectID=${projectID}`);
      const data = await response.json();
      
      if (data.success) {
        setLocations(data.locations || []);
      } else {
        setError('Failed to load collection sites');
      }
    } catch (err) {
      setError('Something went wrong. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewLocation({
      ...newLocation,
      [name]: value
    });
  };
  
  const handleAddLocation = async (e) => {
    e.preventDefault();
    
    try {
      const response = await fetch('http://localhost:5000/api/add_location', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          projectID,
          username,
          location: newLocation
        }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        setNewLocation({
          name: '',
          address: '',
          coordinates: '',
          description: '',
          accessibility: 'public'
        });
        setIsAddingLocation(false);
        fetchLocations();
      } else {
        setError('Failed to add location');
      }
    } catch (err) {
      setError('Something went wrong. Please try again.');
      console.error(err);
    }
  };
  
  const toggleAddLocationForm = () => {
    setIsAddingLocation(!isAddingLocation);
  };
  
  if (isLoading) {
    return <div className="flex justify-center py-8"><div className="animate-spin h-8 w-8 border-4 border-green-500 rounded-full border-t-transparent"></div></div>;
  }
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-bold text-green-900">Collection Sites</h2>
        <button 
          onClick={toggleAddLocationForm}
          className="inline-flex items-center px-3 py-1.5 border border-green-300 text-sm font-medium rounded-md text-green-700 bg-white hover:bg-green-50"
        >
          {isAddingLocation ? (
            'Cancel'
          ) : (
            <>
              <PlusCircleIcon className="h-5 w-5 mr-1" />
              Add Location
            </>
          )}
        </button>
      </div>
      
      {error && (
        <div className="mb-4 p-3 bg-red-50 text-red-700 rounded-md text-sm">
          {error}
        </div>
      )}
      
      {isAddingLocation && (
        <div className="mb-6 bg-green-50 p-4 rounded-lg border border-green-200">
          <h3 className="text-lg font-medium text-green-900 mb-3">Add New Collection Site</h3>
          <form onSubmit={handleAddLocation} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-green-800 mb-1">
                  Location Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={newLocation.name}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="e.g., North Park Pond"
                />
              </div>
              <div>
                <label htmlFor="address" className="block text-sm font-medium text-green-800 mb-1">
                  Address
                </label>
                <input
                  type="text"
                  id="address"
                  name="address"
                  value={newLocation.address}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="Street address or landmark"
                />
              </div>
            </div>
            
            <div>
              <label htmlFor="coordinates" className="block text-sm font-medium text-green-800 mb-1">
                GPS Coordinates (optional)
              </label>
              <input
                type="text"
                id="coordinates"
                name="coordinates"
                value={newLocation.coordinates}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                placeholder="e.g., 47.6062° N, 122.3321° W"
              />
            </div>
            
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-green-800 mb-1">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                rows={3}
                value={newLocation.description}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                placeholder="Describe any details about the location that would help others find it or collect data properly"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-green-800 mb-1">
                Accessibility
              </label>
              <div className="flex space-x-4">
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    name="accessibility"
                    value="public"
                    checked={newLocation.accessibility === 'public'}
                    onChange={handleInputChange}
                    className="text-green-600 focus:ring-green-500"
                  />
                  <span className="ml-2 text-sm text-green-800">Public Area</span>
                </label>
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    name="accessibility"
                    value="private"
                    checked={newLocation.accessibility === 'private'}
                    onChange={handleInputChange}
                    className="text-green-600 focus:ring-green-500"
                  />
                  <span className="ml-2 text-sm text-green-800">Private Property (permission required)</span>
                </label>
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    name="accessibility"
                    value="restricted"
                    checked={newLocation.accessibility === 'restricted'}
                    onChange={handleInputChange}
                    className="text-green-600 focus:ring-green-500"
                  />
                  <span className="ml-2 text-sm text-green-800">Restricted Access</span>
                </label>
              </div>
            </div>
            
            <div className="flex justify-end">
              <button
                type="submit"
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
              >
                Add Location
              </button>
            </div>
          </form>
        </div>
      )}
      
      {/* Map Placeholder */}
      <div className="mb-6 bg-green-50 border border-green-200 rounded-lg h-64 flex items-center justify-center">
        <div className="text-center">
          <MapPinIcon className="h-8 w-8 text-green-400 mx-auto mb-2" />
          <p className="text-green-700">Interactive map would display here</p>
          <p className="text-sm text-green-600">Showing all {locations.length} collection sites</p>
        </div>
      </div>
      
      {locations.length === 0 ? (
        <div className="text-center py-6">
          <h3 className="text-lg font-medium text-green-900 mb-1">No Collection Sites Added</h3>
          <p className="text-green-700">
            Add locations where participants can collect data for this project.
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {locations.map((location, index) => (
            <div key={index} className="bg-white border border-green-100 rounded-lg p-4 shadow-sm">
              <div className="flex justify-between">
                <h3 className="text-lg font-medium text-green-900">{location.name}</h3>
                <span className={`text-xs px-2 py-1 rounded-full ${
                  location.accessibility === 'public' 
                    ? 'bg-green-100 text-green-800' 
                    : location.accessibility === 'private'
                    ? 'bg-yellow-100 text-yellow-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {location.accessibility === 'public' 
                    ? 'Public Access' 
                    : location.accessibility === 'private'
                    ? 'Private Property'
                    : 'Restricted'}
                </span>
              </div>
              
              <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium text-green-800">Address</p>
                  <p className="text-green-700">{location.address || 'No address provided'}</p>
                </div>
                {location.coordinates && (
                  <div>
                    <p className="text-sm font-medium text-green-800">Coordinates</p>
                    <p className="text-green-700">{location.coordinates}</p>
                  </div>
                )}
              </div>
              
              {location.description && (
                <div className="mt-3">
                  <p className="text-sm font-medium text-green-800">Description</p>
                  <p className="text-green-700 text-sm mt-1">{location.description}</p>
                </div>
              )}
              
              <div className="mt-3 flex justify-between text-xs text-green-600">
                <span>Added by: {location.addedBy}</span>
                <span>Data points: {location.dataPoints || 0}</span>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}